I am a high school student building a personal data infrastructure project to track daily metrics such as sleep, screen time, and productivity. The project is highly iterative: I start with small, manageable steps—what I consider the “first brick”—where I focus on understanding each line of code and the basic workflow before scaling up. Right now, the code is essentially tutorial-level, using manually generated sample data, basic Python constructs, and simple matplotlib plots, so I can fully understand what each part is doing. I have calculated averages, plotted graphs, annotated min and max values, added recommended thresholds, saved metrics to a text file, and committed everything to a GitHub repository. At this stage, I am deliberately working slowly and manually, prioritizing comprehension over efficiency, with the goal that once the foundational bricks are solid, I can gradually expand, automate, and eventually integrate AI or machine learning for deeper analysis. The project is designed to evolve over time, with each iteration adding complexity or polish. My workflow emphasizes iterative learning and gradual improvement rather than following a rigid blueprint, so I can continue refining and expanding the system as I progress.
Right now, I think I am trying to save the code as a function, to re-use.
The project currently tracks metrics daily, with sleep measured in hours as floats, screen time in minutes, and productivity on a 1–10 scale, though I plan to expand to additional metrics over time. Data is currently entered manually or generated for testing purposes, and saved in a simple text file with numeric lines; there is no database yet, but future plans include migrating to SQLite or PostgreSQL for persistent storage, easier querying, and scalability. The environment uses Python with libraries such as matplotlib, numpy, and pandas, and I plan to document dependencies and use a virtual environment for reproducibility. At this stage, plots are static, calculations are manual, and scripts are not yet modularized, but I intend to refactor code into reusable functions, automate data collection and processing, and eventually integrate machine learning models for trend analysis, predictions, and personalized insights. Each phase of the project has defined goals, with success measured by correct metric calculations, accurate plotting, and functional data storage before moving to more advanced automation or ML integration. Limitations include reliance on sample data, lack of interactive visualizations, and no automated workflow, which will be addressed in future iterations. The long-term vision is to maintain the project over six months, iteratively refining and expanding it while keeping detailed GitHub records, eventually producing a nationally competitive, technically sophisticated project that demonstrates persistence, analytical skill, and application of statistical and machine learning concepts from school.
At this stage of the project, I am deliberately working in microsteps, focusing on completing very small, manageable tasks one at a time. Each task, or “first brick,” is fully understood and implemented before moving on to the next, allowing me to learn every detail of the code, workflow, and data handling. This approach ensures that I grasp the fundamentals before scaling up or automating processes, and it allows for iterative improvement where I can gradually expand, refactor, and polish the system without losing comprehension. By progressing in microsteps, I can safely experiment, debug, and refine each component, building a strong foundation for future automation, integration with databases, and eventual machine learning enhancements.
I want this project context to inform future AI assistance, but I do not want the AI to generate new code for me. At this stage, the goal is for the AI to provide guidance, suggestions, or explanations only, while I manually write and experiment with all code myself. This ensures that I fully understand every line, workflow, and functionality before expanding, automating, or refactoring. The AI’s role is purely supportive, helping me think through problems, debug, or plan next steps, but all code creation remains my responsibility to preserve learning, comprehension, and the iterative microsteps approach.
The AI should serve only as a source of guidance, suggestions, and explanations, and should not generate new code. Its role is to help me think through problems, plan next steps, debug, or clarify concepts, while I remain fully responsible for writing and experimenting with all code myself. This ensures that I deeply understand every line, workflow, and functionality, preserving the learning process and the iterative, microsteps approach where each small task is completed and comprehended before moving on.
